from typing import Dict, List, Optional, Any
from datetime import datetime
import json
import logging
from ..schemas.claude import (
    ClaudeMarketData,
    ClaudeModel,
    PromptContext,
    GeneratedPrompt
)
from ..models.user_preferences import UserTradingPreferences

logger = logging.getLogger(__name__)

class ClaudePromptService:
    """Service de g√©n√©ration de prompts adaptatifs pour Claude"""

    def __init__(self):
        self.base_system_prompts = {
            ClaudeModel.HAIKU: self._get_haiku_system_prompt(),
            ClaudeModel.SONNET: self._get_sonnet_system_prompt(),
            ClaudeModel.SONNET_35: self._get_sonnet_35_system_prompt(),
            ClaudeModel.OPUS: self._get_opus_system_prompt()
        }

    def generate_trading_prompt(
        self,
        assets: List[str],
        model: ClaudeModel,
        market_data: Dict[str, ClaudeMarketData],
        user_preferences: Optional[UserTradingPreferences] = None,
        analysis_type: str = "detailed",
        custom_prompt: Optional[str] = None
    ) -> GeneratedPrompt:
        """
        G√©n√®re un prompt complet pour l'analyse trading

        Args:
            assets: Liste des actifs √† analyser
            model: Mod√®le Claude √† utiliser
            market_data: Donn√©es de march√© par actif
            user_preferences: Pr√©f√©rences de l'utilisateur
            analysis_type: Type d'analyse (quick/detailed)
            custom_prompt: Instructions personnalis√©es

        Returns:
            Prompt g√©n√©r√© avec contexte
        """
        try:
            # Prompt syst√®me adapt√© au mod√®le
            system_prompt = self.base_system_prompts.get(model, self.base_system_prompts[ClaudeModel.SONNET_35])

            # Construction du prompt utilisateur
            user_prompt = self._build_user_prompt(
                assets=assets,
                market_data=market_data,
                user_preferences=user_preferences,
                analysis_type=analysis_type,
                custom_prompt=custom_prompt
            )

            # R√©sum√© du contexte
            context_summary = self._build_context_summary(
                assets=assets,
                market_data=market_data,
                user_preferences=user_preferences,
                analysis_type=analysis_type
            )

            # Estimation des tokens (approximative)
            estimated_tokens = self._estimate_tokens(system_prompt, user_prompt)

            return GeneratedPrompt(
                system_prompt=system_prompt,
                user_prompt=user_prompt,
                context_summary=context_summary,
                estimated_tokens=estimated_tokens
            )

        except Exception as e:
            logger.error(f"Erreur g√©n√©ration prompt: {e}")
            raise

    def _build_user_prompt(
        self,
        assets: List[str],
        market_data: Dict[str, ClaudeMarketData],
        user_preferences: Optional[UserTradingPreferences],
        analysis_type: str,
        custom_prompt: Optional[str]
    ) -> str:
        """Construit le prompt utilisateur principal"""

        sections = []

        # Section contexte utilisateur
        if user_preferences:
            sections.append(self._build_user_context_section(user_preferences))

        # Section donn√©es de march√©
        if market_data:
            sections.append(self._build_market_data_section(market_data, assets))

        # Section instructions d'analyse
        sections.append(self._build_analysis_instructions(assets, analysis_type))

        # Section prompt personnalis√©
        if custom_prompt:
            sections.append(f"INSTRUCTIONS ADDITIONNELLES:\n{custom_prompt}")

        # Section format de r√©ponse
        sections.append(self._build_response_format_section(analysis_type))

        return "\n\n".join(sections)

    def _build_user_context_section(self, preferences: UserTradingPreferences) -> str:
        """Construit la section contexte utilisateur"""

        # Parser les pr√©f√©rences JSON
        preferred_assets = self._parse_json_field(preferences.preferred_assets, [])
        technical_indicators = self._parse_json_field(preferences.technical_indicators, [])

        context = f"""PROFIL TRADER:
‚Ä¢ Tol√©rance au risque: {preferences.risk_tolerance.value}
‚Ä¢ Horizon d'investissement: {self._format_investment_horizon(preferences.investment_horizon.value)}
‚Ä¢ Style de trading: {preferences.trading_style.value}

PARAM√àTRES DE POSITION:
‚Ä¢ Taille maximale de position: {preferences.max_position_size}% du portefeuille
‚Ä¢ Stop-loss par d√©faut: {preferences.stop_loss_percentage}%
‚Ä¢ Ratio risk/reward: {preferences.take_profit_ratio}:1

PR√âF√âRENCES:
‚Ä¢ Actifs pr√©f√©r√©s: {', '.join(preferred_assets) if preferred_assets else 'Non sp√©cifi√©s'}
‚Ä¢ Indicateurs techniques: {', '.join(technical_indicators) if technical_indicators else 'RSI, MACD, SMA'}"""

        return context

    def _build_market_data_section(self, market_data: Dict[str, ClaudeMarketData], assets: List[str]) -> str:
        """Construit la section donn√©es de march√©"""

        lines = ["DONN√âES DE MARCH√â (CoinGecko):"]

        for asset in assets:
            data = market_data.get(asset)
            if data:
                price_change = f"({data.price_change_24h:+.2f}% 24h)" if data.price_change_24h else ""
                volume_str = f", Vol: ${self._format_large_number(data.volume_24h)}" if data.volume_24h else ""
                cap_str = f", Cap: ${self._format_large_number(data.market_cap)}" if data.market_cap else ""

                lines.append(f"‚Ä¢ {asset} ({data.name}): ${data.current_price:,.2f} {price_change}{volume_str}{cap_str}")

                # Donn√©es additionnelles si disponibles
                if data.high_24h and data.low_24h:
                    lines.append(f"  Range 24h: ${data.low_24h:,.2f} - ${data.high_24h:,.2f}")

                if data.price_change_7d:
                    lines.append(f"  Variation 7j: {data.price_change_7d:+.2f}%")
            else:
                lines.append(f"‚Ä¢ {asset}: Donn√©es non disponibles")

        return "\n".join(lines)

    def _build_analysis_instructions(self, assets: List[str], analysis_type: str) -> str:
        """Construit les instructions d'analyse"""

        if analysis_type == "quick":
            return f"""ANALYSE DEMAND√âE:
Effectuez une analyse trading concise des actifs {', '.join(assets)}.

Concentrez-vous sur:
1. Tendance g√©n√©rale et momentum
2. Niveaux de support/r√©sistance cl√©s
3. Signal d'entr√©e/sortie principal
4. Gestion des risques de base"""

        else:  # detailed
            return f"""ANALYSE DEMAND√âE:
Effectuez une analyse trading approfondie des actifs {', '.join(assets)}.

Analysez syst√©matiquement:
1. **Analyse technique**: Tendances, indicateurs, niveaux cl√©s
2. **Momentum de march√©**: Volume, volatilit√©, sentiment
3. **Niveaux de prix critiques**: Support, r√©sistance, zones de breakout
4. **Signaux d'entr√©e/sortie**: Timing optimal selon les pr√©f√©rences
5. **Gestion des risques**: Stop-loss, take-profit, position sizing
6. **Perspective temporelle**: Court, moyen et long terme
7. **Facteurs macro**: Impact du contexte √©conomique g√©n√©ral"""

    def _build_response_format_section(self, analysis_type: str) -> str:
        """Construit la section format de r√©ponse"""

        if analysis_type == "quick":
            return """FORMAT DE R√âPONSE:
Structurez votre r√©ponse en sections claires:

üìä **R√âSUM√â MARCH√â** (2-3 phrases)

üéØ **RECOMMANDATIONS PAR ACTIF**
Pour chaque actif:
‚Ä¢ [SYMBOLE]: [ACTION] - [JUSTIFICATION]
‚Ä¢ Entr√©e: $[PRIX] | Stop: $[PRIX] | Target: $[PRIX]

‚ö†Ô∏è **RISQUES PRINCIPAUX**

üí° **CONCLUSION**"""

        else:  # detailed
            return """FORMAT DE R√âPONSE:
Structurez votre analyse en sections d√©taill√©es:

üìä **ANALYSE DE MARCH√â G√âN√âRALE**
Vue d'ensemble des conditions actuelles

üîç **ANALYSE PAR ACTIF**
Pour chaque actif:
‚Ä¢ **Analyse technique**: Tendances, indicateurs, patterns
‚Ä¢ **Niveaux cl√©s**: Support/r√©sistance avec prix pr√©cis
‚Ä¢ **Recommandation**: Action, timing, justification d√©taill√©e
‚Ä¢ **Plan de position**: Entr√©e, stop-loss, take-profit, taille

üìà **STRAT√âGIE GLOBALE**
Allocation sugg√©r√©e entre les actifs

‚ö†Ô∏è **GESTION DES RISQUES**
Strat√©gies de protection adapt√©es au profil

üéØ **PLAN D'ACTION**
√âtapes concr√®tes √† suivre

üí° **CONCLUSION ET PERSPECTIVES**
Synth√®se et vision √† moyen terme"""

    def _get_haiku_system_prompt(self) -> str:
        """Prompt syst√®me optimis√© pour Claude Haiku"""
        return """Tu es un analyste trading expert, sp√©cialis√© dans les analyses rapides et pr√©cises.

OBJECTIF: Fournir des analyses trading concises mais compl√®tes, adapt√©es au profil de risque de l'utilisateur.

PRINCIPES:
‚Ä¢ Privil√©gier la clart√© et l'actionnable
‚Ä¢ Utiliser les donn√©es de march√© fournies
‚Ä¢ Respecter les pr√©f√©rences de risque utilisateur
‚Ä¢ Donner des niveaux de prix pr√©cis
‚Ä¢ Justifier chaque recommandation

STYLE: Direct, facuel, sans jargon inutile. Concentr√© sur l'essentiel."""

    def _get_sonnet_system_prompt(self) -> str:
        """Prompt syst√®me optimis√© pour Claude Sonnet"""
        return """Tu es un analyste trading professionnel avec une expertise approfondie des march√©s financiers.

OBJECTIF: Fournir des analyses trading d√©taill√©es et nuanc√©es, parfaitement adapt√©es au profil et aux pr√©f√©rences de l'utilisateur.

EXPERTISE:
‚Ä¢ Analyse technique multi-timeframes
‚Ä¢ Gestion des risques adaptative
‚Ä¢ Psychologie des march√©s
‚Ä¢ Strat√©gies de position
‚Ä¢ Timing d'entr√©e/sortie optimal

APPROCHE:
‚Ä¢ Analyser tous les timeframes pertinents
‚Ä¢ Int√©grer l'analyse fondamentale au contexte
‚Ä¢ Adapter les recommandations au profil de risque
‚Ä¢ Proposer des alternatives selon les sc√©narios
‚Ä¢ Justifier chaque d√©cision avec des donn√©es

STYLE: Professionnel, p√©dagogique, structur√©. √âquilibre entre d√©tail et lisibilit√©."""

    def _get_sonnet_35_system_prompt(self) -> str:
        """Prompt syst√®me optimis√© pour Claude 3.5 Sonnet"""
        return """Tu es un analyste trading senior avec une vision holistique des march√©s financiers.

OBJECTIF: Fournir des analyses trading de niveau institutionnel, int√©grant tous les facteurs pertinents pour une prise de d√©cision optimale.

COMP√âTENCES AVANC√âES:
‚Ä¢ Analyse technique multi-dimensionnelle
‚Ä¢ Corr√©lations inter-march√©s
‚Ä¢ Gestion de portefeuille dynamique
‚Ä¢ Psychologie comportementale
‚Ä¢ Timing de march√© sophistiqu√©
‚Ä¢ Backtesting mental des strat√©gies

M√âTHODOLOGIE:
‚Ä¢ Analyse des donn√©es en contexte historique
‚Ä¢ √âvaluation des biais cognitifs potentiels
‚Ä¢ Adaptation aux conditions de march√© actuelles
‚Ä¢ Int√©gration des facteurs macro et micro
‚Ä¢ Optimisation risk-adjusted des recommandations
‚Ä¢ Anticipation des sc√©narios alternatifs

STYLE: Expert mais accessible, nuanc√©, avec une perspective long-terme. Int√®gre l'incertitude et les probabilit√©s."""

    def _get_opus_system_prompt(self) -> str:
        """Prompt syst√®me optimis√© pour Claude Opus"""
        return """Tu es un analyste trading institutionnel de niveau √©lite, avec une compr√©hension syst√©mique des march√©s financiers.

OBJECTIF: Fournir des analyses trading exhaustives et sophistiqu√©es, rivalisant avec les meilleures recherches institutionnelles.

EXPERTISE √âLITE:
‚Ä¢ Mod√©lisation quantitative avanc√©e
‚Ä¢ Analyse des flux de capitaux
‚Ä¢ Microstructure des march√©s
‚Ä¢ Strat√©gies multi-actifs complexes
‚Ä¢ Gestion des risques stochastiques
‚Ä¢ Alpha generation et factor investing
‚Ä¢ Sentiment analysis et positionnement institutionnel

M√âTHODOLOGIE AVANC√âE:
‚Ä¢ Analyse fractale multi-timeframes
‚Ä¢ Int√©gration des r√©gimes de march√©
‚Ä¢ Mod√©lisation des corr√©lations dynamiques
‚Ä¢ √âvaluation de la liquidit√© et de l'impact
‚Ä¢ Stress-testing des sc√©narios extr√™mes
‚Ä¢ Optimisation de Sharpe multi-contraintes
‚Ä¢ Anticipation des changements de r√©gime

PERSPECTIVE:
‚Ä¢ Vision syst√©mique des interconnexions
‚Ä¢ Int√©gration de l'√©conomie comportementale
‚Ä¢ Prise en compte des facteurs g√©opolitiques
‚Ä¢ Adaptation aux cycles macro-√©conomiques
‚Ä¢ Optimisation continue des processus

STYLE: Sophistiqu√© mais structur√©, avec une profondeur analytique exceptionnelle. Int√®gre les nuances et les subtilit√©s du trading professionnel."""

    def _format_investment_horizon(self, horizon: str) -> str:
        """Formate l'horizon d'investissement"""
        mapping = {
            "SHORT_TERM": "Court terme (< 1 mois)",
            "MEDIUM_TERM": "Moyen terme (1-12 mois)",
            "LONG_TERM": "Long terme (> 1 an)"
        }
        return mapping.get(horizon, horizon)

    def _format_large_number(self, number: float) -> str:
        """Formate les grands nombres en K, M, B"""
        if number >= 1e9:
            return f"{number/1e9:.1f}B"
        elif number >= 1e6:
            return f"{number/1e6:.1f}M"
        elif number >= 1e3:
            return f"{number/1e3:.1f}K"
        else:
            return f"{number:.0f}"

    def _parse_json_field(self, field_value: Optional[str], default: List[str]) -> List[str]:
        """Parse un champ JSON avec fallback"""
        if not field_value:
            return default

        try:
            parsed = json.loads(field_value)
            return parsed if isinstance(parsed, list) else default
        except (json.JSONDecodeError, TypeError):
            # Fallback: traiter comme une cha√Æne s√©par√©e par des virgules
            try:
                return [item.strip().upper() for item in field_value.split(',') if item.strip()]
            except:
                return default

    def _estimate_tokens(self, system_prompt: str, user_prompt: str) -> int:
        """Estimation approximative du nombre de tokens"""
        # Approximation: ~4 caract√®res par token pour du texte fran√ßais/anglais
        total_chars = len(system_prompt) + len(user_prompt)
        return int(total_chars / 4)

    def _build_context_summary(
        self,
        assets: List[str],
        market_data: Dict[str, ClaudeMarketData],
        user_preferences: Optional[UserTradingPreferences],
        analysis_type: str
    ) -> str:
        """Construit un r√©sum√© du contexte"""

        parts = [
            f"Actifs: {', '.join(assets)}",
            f"Type: {analysis_type}"
        ]

        if user_preferences:
            parts.append(f"Profil: {user_preferences.risk_tolerance.value}/{user_preferences.trading_style.value}")

        if market_data:
            parts.append(f"Donn√©es march√©: {len(market_data)} actifs")

        return " | ".join(parts)